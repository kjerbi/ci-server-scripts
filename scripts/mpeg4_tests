#!/usr/bin/python

import argparse
import subprocess
import os
import sys

VERSION = "0.1"

def computeFileList():
    global fileList
    fileList = [
        "MPEG4/SIMPLE/I-VOP/hit000",
        "MPEG4/SIMPLE/I-VOP/jvc000",
        "MPEG4/SIMPLE/I-VOP/san000",
        "MPEG4/SIMPLE/I-VOP/san001",
        
        "MPEG4/SIMPLE/P-VOP/hit001",
        "MPEG4/SIMPLE/P-VOP/hit002",
        "MPEG4/SIMPLE/P-VOP/hit003",
        "MPEG4/SIMPLE/P-VOP/hit004",
        
        "MPEG4/SIMPLE/P-VOP/hit005",
        "MPEG4/SIMPLE/P-VOP/hit006",
        
        "MPEG4/SIMPLE/P-VOP/hit007",
        "MPEG4/SIMPLE/P-VOP/hit008",
        "MPEG4/SIMPLE/P-VOP/hit009",
        "MPEG4/SIMPLE/P-VOP/hit010",
        "MPEG4/SIMPLE/P-VOP/hit011",
        "MPEG4/SIMPLE/P-VOP/hit013",
        "MPEG4/SIMPLE/P-VOP/hit014",
        "MPEG4/SIMPLE/P-VOP/jvc001",
        "MPEG4/SIMPLE/P-VOP/jvc002",
        "MPEG4/SIMPLE/P-VOP/jvc003",
        "MPEG4/SIMPLE/P-VOP/jvc004",
        "MPEG4/SIMPLE/P-VOP/jvc005",
        "MPEG4/SIMPLE/P-VOP/jvc006",
        "MPEG4/SIMPLE/P-VOP/jvc007",
        "MPEG4/SIMPLE/P-VOP/jvc008",
        "MPEG4/SIMPLE/P-VOP/jvc009",
        "MPEG4/SIMPLE/P-VOP/jvc010",
        "MPEG4/SIMPLE/P-VOP/jvc011",
        "MPEG4/SIMPLE/P-VOP/jvc014",
        "MPEG4/SIMPLE/P-VOP/jvc015",
        "MPEG4/SIMPLE/P-VOP/jvc016",
        "MPEG4/SIMPLE/P-VOP/jvc017",
        "MPEG4/SIMPLE/P-VOP/jvc018",
        "MPEG4/SIMPLE/P-VOP/jvc019",
        "MPEG4/SIMPLE/P-VOP/jvc020",
        "MPEG4/SIMPLE/P-VOP/jvc021",
        "MPEG4/SIMPLE/P-VOP/san002",
        "MPEG4/SIMPLE/P-VOP/san003",
        "MPEG4/SIMPLE/P-VOP/san004",
        "MPEG4/SIMPLE/P-VOP/san005",
        "MPEG4/SIMPLE/P-VOP/san006",
        "MPEG4/SIMPLE/P-VOP/san007",
        "MPEG4/SIMPLE/P-VOP/san009",
        "MPEG4/SIMPLE/P-VOP/san010",
        "MPEG4/SIMPLE/P-VOP/san011",
        "MPEG4/SIMPLE/P-VOP/san012",
        
        "MPEG4/SIMPLE/Overall/hit016",
        "MPEG4/SIMPLE/Overall/hit017",
        "MPEG4/SIMPLE/Overall/hit018",
        "MPEG4/SIMPLE/Overall/hit019",
        "MPEG4/SIMPLE/Overall/hit020",
        "MPEG4/SIMPLE/Overall/hit021",
        "MPEG4/SIMPLE/Overall/hit022",
        "MPEG4/SIMPLE/Overall/hit023",
        "MPEG4/SIMPLE/Overall/hit024",
        
        "MPEG4/CORE/I-VOP/mat001",
        "MPEG4/CORE/I-VOP/mat004",
        "MPEG4/CORE/I-VOP/mat005",
        "MPEG4/CORE/I-VOP/mat006",
        "MPEG4/CORE/I-VOP/mat007",
        "MPEG4/CORE/I-VOP/mat008",
        "MPEG4/CORE/I-VOP/mat009",
        "MPEG4/CORE/I-VOP/mat010",
        "MPEG4/CORE/I-VOP/mat013",
        "MPEG4/CORE/I-VOP/mat014",
        "MPEG4/CORE/I-VOP/mat015",
        "MPEG4/CORE/I-VOP/mat016",
        
        ["MPEG4/SIMPLE/vcon-scs1.bits", "MPEG4/SIMPLE/vcon-scs1.yuv"],
        ["MPEG4/SIMPLE/vcon-scs2.bits", "MPEG4/SIMPLE/vcon-scs2.yuv"],
        ["MPEG4/SIMPLE/vcon-scs3.bits", "MPEG4/SIMPLE/vcon-scs3.yuv"],
        ["MPEG4/SIMPLE/vcon-scs4.cmp", "MPEG4/SIMPLE/vcon-scs4.yuv"],
        ["MPEG4/SIMPLE/vcon-scs5.cmp", "MPEG4/SIMPLE/vcon-scs5.yuv"],
        ["MPEG4/SIMPLE/vcon-scs6.cmp", "MPEG4/SIMPLE/vcon-scs6.yuv"],
        ["MPEG4/SIMPLE/vcon-scs7.cmp", "MPEG4/SIMPLE/vcon-scs7.yuv"],
        ["MPEG4/SIMPLE/vcon-scs8.bits", "MPEG4/SIMPLE/vcon-scs8.yuv"],
        ["MPEG4/SIMPLE/vcon-scs9.bits", "MPEG4/SIMPLE/vcon-scs9.yuv"],
        ["MPEG4/SIMPLE/vcon-scs10.cmp", "MPEG4/SIMPLE/vcon-scs10.yuv"],
        ["MPEG4/SIMPLE/vcon-scs11.cmp", "MPEG4/SIMPLE/vcon-scs11.yuv"],
        
        "MPEG4/foreman_cif_xvid_384kbps_I_P",
        "MPEG4/foreman_cif_xvid_384kbps_I_P_B",
        "MPEG4/foreman_cif_xvid_700kbps_I_P_B",
        
        "MPEG4/SIMPLE/P-VOP/jvc013",
        "MPEG4/SIMPLE/P-VOP/hit012",
        "MPEG4/SIMPLE/P-VOP/san008",
        "MPEG4/SIMPLE/P-VOP/san014",
        "MPEG4/SIMPLE/P-VOP/jvc012",
        "MPEG4/SIMPLE/P-VOP/san013",
        "MPEG4/SIMPLE/P-VOP/san015",
        "MPEG4/SIMPLE/P-VOP/san016",
        "MPEG4/SIMPLE/P-VOP/san017",
        "MPEG4/SIMPLE/P-VOP/san018",
        "MPEG4/SIMPLE/P-VOP/san019",
        "MPEG4/SIMPLE/P-VOP/san020"
    ]

def main():
    clArguments = parser.parse_args()
    
    if not os.path.isfile(clArguments.decoder) or not os.access(clArguments.decoder, os.X_OK):
        sys.exit(clArguments.decoder + " is not an executable file !")
    
    if not os.path.isdir(clArguments.sequences) or not os.path.isdir(clArguments.sequences + "/MPEG4"):
        sys.exit("The sequence path must be a valid directory and contains 'MPEG4' subdirectory")
    
    errorsCount = 0
    warningsCount = 0
    
    for file in fileList:
        if type(file).__name__ == "list":
            inputFile = file[0]
            outputFile = file[1]
        else:
            inputFile = file+".m4v"
            outputFile = file+".yuv"
        
        if not os.path.exists(clArguments.sequences +"/"+ inputFile):
            print "Warning : file", clArguments.sequences, "/", inputFile, "does not exists"
            warningsCount += 1
            continue
        if not os.path.exists(clArguments.sequences +"/"+ outputFile):
            print "Warning : file", clArguments.sequences, "/", outputFile, "does not exists"
            warningsCount += 1
            continue
        
        execPath = [clArguments.decoder, "-i", clArguments.sequences +"/"+ inputFile,
                    "-o", clArguments.sequences +"/"+ outputFile]
        
        if clArguments.loopNumber != None:
            execPath.append("-l")
            execPath.append(str(clArguments.loopNumber))
        
        if not clArguments.enableDisplay:
            execPath.append("-n")
        
        print "Try to decode", inputFile, "and check consistency wit", outputFile, " :"
        commandResult = subprocess.call(execPath)
        
        if commandResult != 0:
            print "Error with the files ", inputFile, " / ", outputFile
            print "Command returned code ", commandResult
            errorsCount += 1
    
    if errorsCount != 0:
        sys.exit("The test suite finished with " + str(errorsCount) + " errors and " + str(warningsCount) + " warnings.")
    elif warningsCount != 0:
        print "The test suite finished with no errors but", warningsCount, "warnings."
        sys.exit()
    else :
        print "The test suite finished with no errors !"
        sys.exit()
    

def setupCommandLine():
    # Help on arparse usage module : http://docs.python.org/library/argparse.html#module-argparse
    global parser
    parser = argparse.ArgumentParser(description='Execute parser to test video decoding', version=VERSION)
    parser.add_argument("-d", "--decoder", action="store", dest="decoder", required=True,
                        help="Path to decoder which must be used")
    parser.add_argument("-s", "--sequences", action="store", dest="sequences", required=True,
                        help="Path to directory containing sequences (ie : containing MPEG4 folder)")
    parser.add_argument("-l", "--loops", type=int, action="store", dest="loopNumber",
                        help="Number of times input is read for every file")
    parser.add_argument("-n", "--nodisplay", action="store_false", dest="enableDisplay", default=True,
                        help="Pass this argument to disable display when testing decoders")

if __name__ == "__main__":
    setupCommandLine()
    computeFileList()
    main()
